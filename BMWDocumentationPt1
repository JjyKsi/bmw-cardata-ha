1.2 Availability and additional information
In order to retrieve vehicle-data via BMW CarData on a technical level, four prerequisites must be met.

Prerequisites:

your vehicle is equipped with an active SIM card
your vehicle is assigned to a supported market (EU)
you have an active Connected Drive contract
your vehicle is mapped to your Connected Drive account
The terms and conditions for the usage of BMW CarData can be found here (link to: B2C T&Cs).


Timestamps

When retrieving telematics data via the BMW CarData API, timestamps are provided for the respective values. You can use the timestamps to identify when a specific value was transmitted from the vehicle to the backend.

Example response:

{
"name: "vehicle.cabin.infotainment.navigation.currentLocation.longitude",
"timestamp": ""2025-07-28T05:16:53.000Z",
"unit": “degrees”,
"value": "9.498705"
}

All timestamps provided by BMW CarData are specified in the ISO 8601 format.



2. Technical registration
In order to retrieve your vehicle data via a data stream or REST API you must first complete the technical registration. BMW CarData offers a standardized Oauth authorization method: OAuth 2.0 Device Authorization Grant, stated in this document as the Device Code Flow.


2.1 Step 1: Generate your client ID
Generate a CarData client ID in the customer portal frontend. This creates a unique client ID within the BMW back end systems, which will be displayed upon clicking the Create CarData Client button. Your client ID serves two important purposes: it is required for registering your devices using the Device Code Flow (explained in the following chapter), and it is essential for generating tokens to ensure continuous access to your most recent vehicle data.

CarData
Figure 2: Create CarData Client


2.2 Step 2: Subscribe to services
After generating your client ID, it is necessary to subscribe to the relevant services. This allocates a specific scope to your client ID, which is required for the subsequent steps. Upon interacting with the corresponding buttons in the frontend, the following scopes will be allocated to your client ID:


Scopes in CarData:

Description	Scope
Scope for CarData API	cardata:api:read
Scope for CarData Stream	cardata:streaming:read


CarData
Figure 3: Create CarData Client


Consider:

If you have not completed the subscription step before registering your device (see chapter below), your tokens will not work for the corresponding CarData service.


2.3 Step 3: Register via the Device Code Flow
Use a REST client application or the command line to execute the cURLs of the Device Code Flow (DCF). Each of the upcoming example requests will be filled with the host from our Swagger. Sensitive fields have been populated using placeholders in the examples below, while others have been kept as is or truncated to demonstrate their format.
For further details on the available endpoints, please refer to the Swagger file.


2.3.1 Request your codes
To initiate the authorization-process for a specific device, call the endpoint shown below. This method will deliver the user code and the device code provided by our services.

POST /gcdm/oauth/device/code

Request details:

client_id: use the generated client ID from the customer portal
response_type: use the fixed value as stated in the Swagger file
code_challenge: see further explanation below
code_challenge_method: use the fixed value as stated in the Swagger file
scope: use the values as stated in the Swagger File and see further explanation below

Code_verifier & code_challenge:

The S256 code challenge method in PKCE (Proof Key for Code Exchange) improves security by hashing the code verifier using SHA-256 and then encoding the result with Base64url. This approach provides a more secure way to verify the client during the authorization code exchange compared to the plain method, where the code verifier is used directly. The standard is further described here.

code_verifier:

A cryptographically random string generated by the client.

code_challenge:

A transformation of the code_verifier, using either the plain or S256 method.


Scopes:

When authenticating a user with OAuth 2.0, there are generally two ways to request scopes: explicit or default. Requesting specific scopes enhances security and user control by limiting the access granted to the application, while expecting default scopes may result in unnecessary permissions. We recommend explicitly requesting the “authenticate_user” and “openid” scopes, which facilitates the authentication process for OAuth 2.0 (and OpenID Connect). Additionally add the scopes of the services you are interested in and the client ID is subscribed to. See this chapter for the correct notations of the CarData specific scopes. Therefor it is suggested to define the scopes as following:

Example request for a subscription to both services:

curl --request POST \
  --url https://customer.bmwgroup.com/gcdm/oauth/device/code \
  --header 'Accept: application/json' \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data client_id=cj5b3499-4918-40x6-a232-f4112f837d72 \
  --data response_type=device_code \      
  --data 'scope=authenticate_user openid cardata:streaming:read cardata:api:read'
  --data code_challenge=yourCodeChallenge \
  --data code_challenge_method=S256 \

Response details:

user_code: the device verification code
device_code: used by the device to poll for the tokens in the final step of the flow
interval: The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint
expires_in: The lifetime in seconds of the "device_code" and "user_code"
verification_uri: link to the page for the user to authorize the login
verification_uri_complete: link to the page for the user to authorize the login including the user_code


2.3.2 Authenticate the device
After successfully retrieving your user_code & device_code, you now need to authenticate within the given expires_in time. Open the verification_uri_complete link in a browser and log in with your customer portal credentials if you are not already logged in.
Alternatively you can use the highlighted button in the CarData page, which refers to verification_uri-link, to manually add the user_code:

CarData
Figure 4: Authenticate device

After clicking the corresponding frontend button, you will get navigated to a page where the user_code needs to be added:

CarData
Figure 5: Enter Code


2.3.3 Request your tokens
After successfully completing the authentication of your device, you are now able to request your tokens.

/gcdm/oauth/token

Input-parameters:

Content-Type: Use the fixed value as stated in the Swagger
client_id: Use the generated client ID from the customer portal
device_code: Part of the response of POST /gcdm/oauth/device/code
grant_type: Use the fixed value as stated in the Swagger, additional information here
code_verifier: See explanation from this chapter
Example request

curl --request POST \
  --url https://customer.bmwgroup.com/gcdm/oauth/token \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data client_id=cj5b3499-4918-40x6-a232-f4112f837d72 \
  --data device_code=yourDeviceCode \            
  --data grant_type=urn:ietf:params:oauth:grant-type:device_code \
  --data code_verifier=yourCodeVerifier

Response details:

access_token: your token to access the CarData APIs
token_type: the type of the token (Bearer)
expires_in: the duration in seconds until the access token expires
refresh_token: the token to refresh your access token
scope: the given scope(s) of your token(s)
id_token: your token to access the CarData data stream
gcid: your unique identifier of your portal user account
The response contains three tokens, consisting of an access token, the refresh token and the ID token.


The access token:

Use this token to access the CarData APIs, by including it in the header of each request to authenticate as the requesting user. In the back end, we verify the user, check the associated scope and ensure that the given token is still valid and has not yet expired. The access token is valid for 1 hour (3600 seconds).


The refresh token:

Use this token to refresh your access-token and your ID-token. The refresh-token is valid for two weeks (1.209.600 seconds). Once your refresh-token has expired, you have to rerun the device code flow and register your device again. Therefore, it is suggested to refresh your refresh-token in time. When a client ID is de-subscribed from its associated services, the corresponding refresh-token would lose its validity immediately.


The ID token:

The ID token is used to access the CarData data stream. For further details, please refer to the associated chapters of this document. The ID token is valid for one hour (3600 seconds).

2.4 Step 4: Refresh your tokens iteratively
In order to access vehicle data - either per stream or REST API calls - you have to remain authenticated with a valid token. If your current access token/ID token is about to expire, you can easily request a new one using the refresh token as an input parameter in the token endpoint:

/gcdm/oauth/token

Example curl for requesting a new access token with the refresh token:

curl --request POST \
  --url https://customer.bmwgroup.com/gcdm/oauth/token \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data grant_type=refresh_token \
  --data refresh_token=yourRefreshToken \
  --data client_id=cj5b3499-4918-40x6-a232-f4112f837d72

This generates a new set of access token, refresh token and ID token and also resets the expiry timer of each token. Please refer to the Swagger or this chapter for further explanation concerning the response.



3. CarData API
This chapter contains additional information about the CarData RESTful API. For further details, please refer to the swagger documentation.


3.1 Prerequisites
You must perform the following steps to be able to access the CarData endpoints:

Mapping of the vehicle

The vehicle you want to retrieve data for needs to be mapped to your customer portal account. You need to be PRIMARY user (i.e. main user / admin) for the given VIN.

Generated client ID

You have successfully generated a client ID in your customer portal.

Subscription & scope

You are successfully subscribed to the CarData API & your device was registered with the correct scope. This chapter contains more information about this step. Be aware, the subscription must have been performed before registering your device.

CarData
Figure 6: Subscribe to API

Device code flow & access token

In order to use our CarData API solution, you need to authenticate via a valid access token which needs to be included in every call. The retrieval of the access token is part of our Device Code Flow. Use the corresponding chapters from this integration guide and the device-code-flow swagger.


3.2 Authentication
The access token needs to be included in the header of each CarData API request. Further details on how to retrieve this token are described here.


3.3 Additional information concerning the CarData endpoints
Additional information about CarData endpoints, their input parameters and the structure of their responses can be found in the CarData API Swagger.

In addition to the technical documentation, the upcoming chapters contain supplementary information. Most of the endpoints can be used to retrieve data which were generated by using the given vehicle. Therefor it is suggested to take a deeper look into the telematics data catalogue, as this documentation contains the description and additional metadata for each telematic key.

Consider rate-limit:

The use of the CarData APIs is subject to a daily rate limit of 50 requests. If you require more frequent access to your vehicle data, we recommend utilizing the CarData streaming solution.


3.3.1 Endpoint: Mapping information
GET /customers/vehicles/mappings

The mapping endpoint returns information about vehicles that are mapped to your account, including the mapping type (PRIMARY or SECONDARY). Be aware that you are only able to retrieve data for mapped vehicles for which you are the primary user.

Consider:

Not all vehicle models are capable of having secondary users. If there is no such concept, the mapped user is considered the primary user.


3.3.2 Endpoints: Container management
CarData offers you four endpoints to manage your containers. The endpoints have the following path:
/customers/containers/

Use the telematics data catalogue for further details about the available telematics data keys. Be aware that there is a limit of 10 containers per user.

Create your container(s) via the POST endpoint. Use the telematics data catalogue for the correct syntax concerning the technicalDescriptor for a telematic data key.

Consider:

You are able to add all available keys from the TDC to a container, though keys which are bound to a dedicated endpoint - see this table - can not be retrieved via the data-retrieval-endpoint.
Via the GET-endpoints you can retrieve all information about your created containers. A container can either have the state ACTIVE or INACTIVE. The data retrieval for a given container is only achievable for containers with the state ACTIVE.
Via the DELETE-endpoint you can set state for a container to INACTIVE. Containers which have the state INACTIVE will be deleted after 29 days automatically.


3.3.3 Retrieve your vehicle data for a container
With the following endpoint you are able to retrieve available data for telematics keys which were defined in the given container:

GET /customers/vehicles/{vin}/telematicData

Telematics keys which belong to the category BASIC DATA or which are bound to a dedicated endpoint will not be shown in this data retrieval. These cases are furthermore described in the upcoming chapter.

Example response:

{
"name: "vehicle.cabin.infotainment.navigation.currentLocation.longitude",
"timestamp": ""2025-07-28T05:16:53.000Z",
"unit": “degrees”,
"value": "9.498705"
}

You can find more information about the timestamp here.


3.3.4 Retrieve your vehicle data for predefined use cases
The following table provides an overview of dedicated endpoints for specific telematics keys.

Endpoint	Telematic Data Key(s) – Technical descriptor	Additional information
GET /customer/vehicles/{vin}/smartMaintenanceTyreDiagnosis	vehicle.chassis.axle.wheel.tire.diagnosis	
GET /customer/vehicles/{vin}/image	vehicle.look.image	
GET /customer/vehicles/{vin}/chargingHistory	vehicle.powertrain.electric.battery.charging.history.sessionsList	
GET /customer/vehicles/{vin}/basicData	All technical descriptors in category: BASIC_DATA	
GET /customers/vehicles/locationBasedChargingSettings	vehicle.powertrain.electric.battery.charging.settingsList	Everything in English; KM as unit

3.4 Error codes
The following table includes all error codes you might receive from BMW CarData.

ErrorID	Error message	ExveNote
CU-100	No token sent	This application error is raised when there was no token included.
CU-101	Authentication error	This application error is raised when there is an authentication error.
CU-102	Token expired	This application error is raised when the given token is expired.
CU-103	Token-scope is not CarData	This application error is raised when the given token is not authorized for the usage of the application: CarData.
CU-104	No permission for specified VIN	This application error is raised when access to the VIN used is not permitted. Reasons are that the vehicle may not be telematics-capable or that the end-customer is not mapped to the given VIN.
CU-105	No permission for specified containerId	This application error is raised when access to the containerId used is not permitted. Reasons are that the containerId is not allocated to the user or it does not exist. Use the GET /customer/containers endpoint to retrieve the identifier.
CU-120	Format of parameter VIN is invalid	This application error is raised when the format of the VIN is invalid. The VIN is always exactly 17 characters long with UPPER case letters.

Please check the VIN used.
CU-121	Format of parameter containerId is invalid	This application error is raised when the format of the containerId is invalid. The containerId always has a length of 13 characters, and can be retrieved after creation via the GET /customer/containers endpoint.

Please check the containerId used.
CU-122	Container already set for deletion	This application error is raised when the container was already set for deletion.
CU-124	Maximum number of containers reached	This application error is raised when the limit of containers is reached. A container needs to be deleted in order to be able to create a new one.
CU-125	Pagination-Token expired	The specified pagination token in Request-URL is expired.
CU-126	No vehicle image found
for given VIN	This application error is raised if no vehicle image can be found for given VIN.
CU-127	No LBCS data found	This application error is raised if no LBCS data is available for the given VIN.
CU-400	Bad request	This error is raised when the request is wrong.
CU-401	Parameter Invalid	This error is raised when the value of the input parameter was invalid/wrong.
CU-402	Telematic key is invalid	This error is raised when at least one of the requested telematic keys is not found.
CU-429	API rate limit reached	This application error is raised when the daily rate limit has been reached.
CU-500	Internal server error	The server encountered an unexpected condition which prevented it from
fulfilling the request.
CU-503	Service temporarily unavailable	This error is raised in case a partner system is out of order.



4. Streaming
In this chapter, the basics of streaming and how to use the streaming service effectively are explored. You will learn what streaming is and how it works.

Consider:

Streaming is not available for BMW Motorrad.


4.1 What is streaming?
Streaming is a method of transmitting data in real time over a network. It enables instant playback or analysis, making it ideal for applications where up-to-date information is critical. In the context of connected vehicle data, streaming provides raw, unprocessed information from your vehicle in real time.

What makes this particularly powerful is the ability to configure the stream based on your needs. It allows you to receive specific data based on predefined sets of attributes, giving you the flexibility to access only the data that’s relevant to your needs - such as location, tire pressure, or battery status.


4.2 What technology do we use?
To ensure reliable, secure, and efficient delivery of real-time vehicle data, several key technologies are used.

MQTT Protocol

Data is transmitted using the MQTT (Message Queuing Telemetry Transport) protocol – a lightweight, publish-subscribe messaging protocol designed for low-bandwidth, high-latency, or unreliable networks. MQTT is ideal for streaming vehicle data because it enables fast, efficient, and reliable communication between your system and the streaming service. Further information can be found here.

OAuth for Authentication and Authorization

Access to streaming data is protected using OAuth, an open-standard protocol that handles secure authentication and authorization. OAuth ensures that only authorized users and applications can subscribe to vehicle data streams, helping us maintain control over who accesses your data and how it's used. Please refer to this chapter concerning the technical registration, and this example of how to connect to your stream using the ID-token.

SSL/TLS for Data Security

To safeguard the data in transit, all streaming communication is encrypted using SSL/TLS (Secure Sockets Layer / Transport Layer Security) protocols. This ensures that the raw vehicle data being transmitted is protected from interception or tampering, providing end-to-end confidentiality and integrity.

These technologies work together to provide a secure, scalable, and efficient streaming experience tailored to connected vehicle environments.


4.3 How to connect to your stream
Before you can start receiving real-time data from your vehicle, a few essential setup steps are required. These ensure that your connection is properly configured, authenticated, and ready for secure data transmission.


4.3.1 Prerequisites
Mapping of the vehicle

The vehicle you want to retrieve data for needs to be mapped to your customer portal account. You need to be the PRIMARY user for the given VIN.

Generated client ID

You have successfully generated a client ID in your customer portal.

Subscription & scope

You are successfully subscribed to the CarData Streaming & your device was registered with the correct scope. This chapter contains more information about this step. Be aware, the subscription must have been performed before registering your device.

CarData
Figure 7: Subscribe to Stream

Device code flow & ID-token

To use the data stream, you need to authenticate via a valid ID token. The retrieval of the ID token is part of our Device Code Flow. Use the corresponding chapters from this integration guide and the device-code-flow swagger.
The ID token must be used as password, see this chapter for an example using the MQTTX-client.

Consider:

Only one connection per user (GCID) can be established at a time. In case there are several VINs mapped to a user account, subscribe to each VIN (represented by a topic) individually.
Once the ID-token is expired, a new connection with a valid ID-token must be initiated.
Validate dynamic scopes for your ID-token: If there are no dynamic-scopes defined, your device was not registered with the correct scopes. This chapter contains detailed information about the correct procedure.


4.3.2 Create a Streaming Configuration
To create a streaming configuration, please navigate to your customer portal.

After you have successfully subscribed your client ID to CarData streaming, the button to configure your stream becomes active.

CarData
Figure 8: Configure data stream


After clicking the button "Configure data stream", you will be forwarded to another page where all streamable attributes are listed. The credentials for your stream will be visible in the customer portal, after you have selected all the keys you want to receive data for.

CarData
Figure 9: Streaming credentials


Streaming credentials:

Host: The server address that provides the data.
Port: The network port used for establishing the connection.
Topic: The specific data stream you want to subscribe to. The topic is declared with the VIN-identifier for which you have requested the data stream.
Username: Used for identifying your client during connection, this is your GCID.
These parameters are required when setting up your MQTT client to initiate the stream.


4.4 How to connect to your stream using an MQTT client
To receive real-time data over the MQTT protocol, you'll need to set up an MQTT client – a lightweight software component that connects to an MQTT broker and subscribes to specific topics to receive messages.

Start by choosing an MQTT client. There are many options available, including MQTTX, MQTT Explorer and many others.
Verify that all prerequisites are met.
Create a streaming configuration.
Establish a Secure Connection. Set up a SSL/TLS connection to ensure that your data is encrypted in transit. Most MQTT clients support this through built-in configuration options.
Subscribe to the Topic. Once connected, subscribe to the relevant topic. This is the channel through which data will be sent. Messages published to this topic by the server will be delivered directly to your client. You can create a subscription by using your username and topic such as “username/topic”
Receive and Process Data. As data begins to stream in, your MQTT client will receive messages in real time. You can then process, display, or store this data according to your needs.
Stay authenticated. When the ID token expires, your stream connection is closed, and you cannot retrieve further vehicle data. For a continuous dataflow, request a new ID token in time and re-establish the connection.


4.5 Example: Connect to your stream using the MQTTX client and your ID token
Here´s an example of how to connect to your stream with the MQTTX-client which is free to download via this page.
In the given example, version v1.12.0 of the MQTTX-client was used.

Open the MQTTX application and create a new connection

CarData
Figure 10: MQTTX Example - New connection

The following window is displayed, enter the values accordingly

CarData
Figure 11: MQTTX Example - Connection details & credentials


In the field “Name”, select any name for your connection
In the field "Host", select the "mqtts://". For the URI select the host from the streaming credentials visible in the customer portal after the stream was configured
In the field "Port", select the port from the streaming credentials visible in the customer portal after the stream was configured
In the field "Client ID" you can keep the suggestions , as this is generated by the client.
In the field "Username", select the username from the streaming credentials visible in the customer portal after the stream was configured. This is your gcid.
In the field "Password", add your current ID-Token, which you have received via the DCF. Be aware: The token must have the correct scopes and must not yet be expired.
The other attributes (SSL/TLS, SSL Secure, and the certificates) should be set as the screenshots states.

After connecting, click on “New Subscription” to subscribe to your stream:

CarData
Figure 12: MQTTX Example - Subscription details


Add the following values from your [streaming credentials](#Streaming_credentials)

CarData
Figure 13: MQTTX Example - New subscription


As a topic name you can write: your-user-name/your-unique-topic to subscribe to a stream for the specified VIN, or you can subscribe to all your VINs with: your-user-name/+.

With this final step your stream in the MQTTX client is configured. Once data for the attributes in your streaming configuration is updated, a message in .json structure is visible in your MQTTX client.